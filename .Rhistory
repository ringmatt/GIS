choices = c(sort(
unique(df_counties$State))),
multiple = TRUE,
selected = c(sort(
unique(df_counties$State)))),
# Select features which will be used to calculate the "Rust Score"
checkboxGroupInput(inputId = "variables",
label = "Recovery Indicators:",
choices =
c("Population" = "pop_change",
"Foreign Born Population Change" =
"foreign_born_pop_percent_change",
"Income" = "income_change",
"Inequality Decrease" = "inequality_decrease",
"Poverty Decrease" = "poverty_decrease",
"Homelessness Decrease" = "homelessness_decrease",
"Manufacturing Employment Change" =
"manufacturing_percent_change",
"Natural Resources Employment Change" =
"natural_resources_percent_change",
"Home Value" = "home_val_change",
"Home Construction" =
"housing_construction_increase"),
selected = c("pop_change", "income_change",
"home_val_change",
"housing_construction_increase",
"manufacturing_percent_change")),
# Creates menu to navigate to the map, table, and histogram
sidebarMenu(
menuItem('Map',
icon = icon('map'),
tabName = 'maps'),
menuItem('Table',
icon = icon('table'),
tabName = 'tables'),
menuItem('Distribution',
icon = icon('chart-bar'),
tabName = 'charts')
)
),
# Adds css styling
dashboardBody(
tags$head(
tags$link(
rel = 'stylesheet',
type = 'text/css',
href = 'dashboard_styles.css'
)),
# Defines each tab in the menu
tabItems(
# Map tab
tabItem(
tabName = 'maps',
h2('Map'),
leafletOutput(outputId = 'rust_map')),
# Summary statistics of the "Rust Score"
tabItem(
tabName = 'tables',
h2('Summary table'),
dataTableOutput(outputId = 'summary_table')),
# Histogram of "Rust Score"s for counties in selected region
tabItem(
tabName = 'charts',
h2('Rust Distribution'),
plotOutput(outputId = 'plot_output')))
)
)
# server ------------------------------------------------------------------
server <-
function(input, output) {
# Data subsetting and summarizing -------------------------------------
# Filter shapefile by states:
shp_filter <-
reactive({
counties_shp %>%
filter(State %in% input$states) %>%
select(-c(State))})
# Create the Rust Score using each selected variable:
rust <-
reactive({
df_counties %>%
# Filter by states
filter(State %in% input$states) %>%
# Creates a new column summing each selected feature
mutate(`Recovery Score` = rowMeans(
select(., input$variables),
na.rm = TRUE))
})
# Outputs -------------------------------------------------------------
# Map:
output$rust_map <-
renderTmap(
# Merge shapefile
shp_filter() %>%
left_join(
rust(),
by = "GEOID") %>%
# Add colored polygons to the map
tm_shape(.) +
tm_polygons(col = "Recovery Score",
alpha = 0.75,
border.alpha = 0.05,
palette = "BrBG",
style = "cont",
id = "County",
popup.vars = c("County", "State",
"Recovery Score"),
popup.format = list(digits = 2)) +
# Fit the initial zoom to the states we selected
tm_view(bbox =
st_bbox(shp_filter())))
# Summary table of Rust Score:
output$summary_table <-
renderDataTable(
rust() %>%
group_by(c(State)) %>%
summarize(
`Recovery Score IQR` = quantile(`Recovery Score`, probs = 0.75)-
quantile(`Recovery Score`, probs = 0.25),
`Maximum Recovery Score` = max(`Recovery Score`),
`75th Percentile Recovery Score` =
quantile(`Recovery Score`, probs = 0.75),
`Average Recovery Score` = mean(`Recovery Score`),
`25th Percentile Recovery Score` =
quantile(`Recovery Score`, probs = 0.25),
`Minimum Recovery Score` = min(`Recovery Score`)) %>%
arrange(`Average Recovery Score`) %>%
mutate(across(is.numeric, round, 3))
)
# Histogram of county Recovery Scores:
output$plot_output <-
renderPlot(
rust() %>%
filter(State %in% input$states[1:5]) %>%
arrange(State) %>%
ggplot(aes(x = `Recovery Score`,
color = State)) +
geom_density() +
# Color based on number of counties per bin
scale_color_brewer(palette = "Oranges") +
labs(y = "Count",
color = "State") +
theme_minimal())
}
# knit and run app --------------------------------------------------------
shinyApp(ui, server)
# setup -------------------------------------------------------------------
library(lubridate)
library(sf)
library(tmap)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(leaflet)
# data --------------------------------------------------------------------
# Read in Census et al. data
df_counties <-
read_csv("data/master_dataset_clean.csv") %>%
select(!...1) %>%
rename(State = state,
County = name)
# Read in shapefiles:
counties_shp <-
st_read('data/us_counties.shp') %>%
# Merge in state fips information
left_join(
read_csv("data/state_fips.csv"),
on = "STATEFP") %>%
select(c(GEOID, State, geometry)) %>%
filter(State %in%
unique(df_counties$State)) %>%
mutate(GEOID = as.integer(GEOID)) %>%
st_transform(crs = 4326)
# user interface ----------------------------------------------------------
# Create the user interface
ui <-
dashboardPage(
dashboardHeader(title = 'Mapping the Rust Belt'),
dashboardSidebar(
# Choose set of states
selectInput(
inputId = 'states',
label = 'States:',
choices = c(sort(
unique(df_counties$State))),
multiple = TRUE,
selected = c(sort(
unique(df_counties$State)))),
# Select features which will be used to calculate the "Rust Score"
checkboxGroupInput(inputId = "variables",
label = "Recovery Indicators:",
choices =
c("Population" = "pop_change",
"Foreign Born Population Change" =
"foreign_born_pop_percent_change",
"Income" = "income_change",
"Inequality Decrease" = "inequality_decrease",
"Poverty Decrease" = "poverty_decrease",
"Homelessness Decrease" = "homelessness_decrease",
"Manufacturing Employment Change" =
"manufacturing_percent_change",
"Natural Resources Employment Change" =
"natural_resources_percent_change",
"Home Value" = "home_val_change",
"Home Construction" =
"housing_construction_increase"),
selected = c("pop_change", "income_change",
"home_val_change",
"housing_construction_increase",
"manufacturing_percent_change")),
# Creates menu to navigate to the map, table, and histogram
sidebarMenu(
menuItem('Map',
icon = icon('map'),
tabName = 'maps'),
menuItem('Table',
icon = icon('table'),
tabName = 'tables'),
menuItem('Distribution',
icon = icon('chart-bar'),
tabName = 'charts')
)
),
# Adds css styling
dashboardBody(
tags$head(
tags$link(
rel = 'stylesheet',
type = 'text/css',
href = 'dashboard_styles.css'
)),
# Defines each tab in the menu
tabItems(
# Map tab
tabItem(
tabName = 'maps',
h2('Map'),
leafletOutput(outputId = 'rust_map')),
# Summary statistics of the "Rust Score"
tabItem(
tabName = 'tables',
h2('Summary table'),
dataTableOutput(outputId = 'summary_table')),
# Histogram of "Rust Score"s for counties in selected region
tabItem(
tabName = 'charts',
h2('Rust Distribution'),
plotOutput(outputId = 'plot_output')))
)
)
# server ------------------------------------------------------------------
server <-
function(input, output) {
# Data subsetting and summarizing -------------------------------------
# Filter shapefile by states:
shp_filter <-
reactive({
counties_shp %>%
filter(State %in% input$states) %>%
select(-c(State))})
# Create the Rust Score using each selected variable:
rust <-
reactive({
df_counties %>%
# Filter by states
filter(State %in% input$states) %>%
# Creates a new column summing each selected feature
mutate(`Recovery Score` = rowMeans(
select(., input$variables),
na.rm = TRUE))
})
# Outputs -------------------------------------------------------------
# Map:
output$rust_map <-
renderTmap(
# Merge shapefile
shp_filter() %>%
left_join(
rust(),
by = "GEOID") %>%
# Add colored polygons to the map
tm_shape(.) +
tm_polygons(col = "Recovery Score",
alpha = 0.75,
border.alpha = 0.05,
palette = "BrBG",
style = "cont",
id = "County",
popup.vars = c("County", "State",
"Recovery Score"),
popup.format = list(digits = 2)) +
# Fit the initial zoom to the states we selected
tm_view(bbox =
st_bbox(shp_filter())))
# Summary table of Rust Score:
output$summary_table <-
renderDataTable(
rust() %>%
group_by(c(State)) %>%
summarize(
`Recovery Score IQR` = quantile(`Recovery Score`, probs = 0.75)-
quantile(`Recovery Score`, probs = 0.25),
`Maximum Recovery Score` = max(`Recovery Score`),
`75th Percentile Recovery Score` =
quantile(`Recovery Score`, probs = 0.75),
`Average Recovery Score` = mean(`Recovery Score`),
`25th Percentile Recovery Score` =
quantile(`Recovery Score`, probs = 0.25),
`Minimum Recovery Score` = min(`Recovery Score`)) %>%
arrange(`Average Recovery Score`) %>%
mutate(across(is.numeric, round, 3))
)
# Histogram of county Recovery Scores:
output$plot_output <-
renderPlot(
rust() %>%
filter(State %in% input$states[1:5]) %>%
arrange(State) %>%
ggplot(aes(x = `Recovery Score`,
color = State)) +
geom_density() +
# Color based on number of counties per bin
scale_color_brewer(palette = "Dark2") +
labs(y = "Count",
color = "State") +
theme_minimal())
}
# knit and run app --------------------------------------------------------
shinyApp(ui, server)
# setup -------------------------------------------------------------------
library(lubridate)
library(sf)
library(tmap)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(leaflet)
# data --------------------------------------------------------------------
# Read in Census et al. data
df_counties <-
read_csv("data/master_dataset_clean.csv") %>%
select(!...1) %>%
rename(State = state,
County = name)
# Read in shapefiles:
counties_shp <-
st_read('data/us_counties.shp') %>%
# Merge in state fips information
left_join(
read_csv("data/state_fips.csv"),
on = "STATEFP") %>%
select(c(GEOID, State, geometry)) %>%
filter(State %in%
unique(df_counties$State)) %>%
mutate(GEOID = as.integer(GEOID)) %>%
st_transform(crs = 4326)
# user interface ----------------------------------------------------------
# Create the user interface
ui <-
dashboardPage(
dashboardHeader(title = 'Mapping the Rust Belt'),
dashboardSidebar(
# Choose set of states
selectInput(
inputId = 'states',
label = 'States:',
choices = c(sort(
unique(df_counties$State))),
multiple = TRUE,
selected = c(sort(
unique(df_counties$State)))),
# Select features which will be used to calculate the "Rust Score"
checkboxGroupInput(inputId = "variables",
label = "Recovery Indicators:",
choices =
c("Population" = "pop_change",
"Foreign Born Population Change" =
"foreign_born_pop_percent_change",
"Income" = "income_change",
"Inequality Decrease" = "inequality_decrease",
"Poverty Decrease" = "poverty_decrease",
"Homelessness Decrease" = "homelessness_decrease",
"Manufacturing Employment Change" =
"manufacturing_percent_change",
"Natural Resources Employment Change" =
"natural_resources_percent_change",
"Home Value" = "home_val_change",
"Home Construction" =
"housing_construction_increase"),
selected = c("pop_change", "income_change",
"home_val_change",
"housing_construction_increase",
"manufacturing_percent_change")),
# Creates menu to navigate to the map, table, and histogram
sidebarMenu(
menuItem('Map',
icon = icon('map'),
tabName = 'maps'),
menuItem('Table',
icon = icon('table'),
tabName = 'tables'),
menuItem('Distribution',
icon = icon('chart-bar'),
tabName = 'charts')
)
),
# Adds css styling
dashboardBody(
tags$head(
tags$link(
rel = 'stylesheet',
type = 'text/css',
href = 'dashboard_styles.css'
)),
# Defines each tab in the menu
tabItems(
# Map tab
tabItem(
tabName = 'maps',
h2('Map'),
leafletOutput(outputId = 'rust_map')),
# Summary statistics of the "Rust Score"
tabItem(
tabName = 'tables',
h2('Summary table'),
dataTableOutput(outputId = 'summary_table')),
# Histogram of "Rust Score"s for counties in selected region
tabItem(
tabName = 'charts',
h2('Rust Distribution'),
plotOutput(outputId = 'plot_output')))
)
)
# server ------------------------------------------------------------------
server <-
function(input, output) {
# Data subsetting and summarizing -------------------------------------
# Filter shapefile by states:
shp_filter <-
reactive({
counties_shp %>%
filter(State %in% input$states) %>%
select(-c(State))})
# Create the Rust Score using each selected variable:
rust <-
reactive({
df_counties %>%
# Filter by states
filter(State %in% input$states) %>%
# Creates a new column summing each selected feature
mutate(`Recovery Score` = rowMeans(
select(., input$variables),
na.rm = TRUE))
})
# Outputs -------------------------------------------------------------
# Map:
output$rust_map <-
renderTmap(
# Merge shapefile
shp_filter() %>%
left_join(
rust(),
by = "GEOID") %>%
# Add colored polygons to the map
tm_shape(.) +
tm_polygons(col = "Recovery Score",
alpha = 0.75,
border.alpha = 0.05,
palette = "BrBG",
style = "cont",
id = "County",
popup.vars = c("County", "State",
"Recovery Score"),
popup.format = list(digits = 2)) +
# Fit the initial zoom to the states we selected
tm_view(bbox =
st_bbox(shp_filter())))
# Summary table of Rust Score:
output$summary_table <-
renderDataTable(
rust() %>%
group_by(c(State)) %>%
summarize(
`Recovery Score IQR` = quantile(`Recovery Score`, probs = 0.75)-
quantile(`Recovery Score`, probs = 0.25),
`Maximum Recovery Score` = max(`Recovery Score`),
`75th Percentile Recovery Score` =
quantile(`Recovery Score`, probs = 0.75),
`Average Recovery Score` = mean(`Recovery Score`),
`25th Percentile Recovery Score` =
quantile(`Recovery Score`, probs = 0.25),
`Minimum Recovery Score` = min(`Recovery Score`)) %>%
arrange(`Average Recovery Score`) %>%
mutate(across(is.numeric, round, 3))
)
# Histogram of county Recovery Scores:
output$plot_output <-
renderPlot(
rust() %>%
filter(State %in% input$states[1:5]) %>%
arrange(State) %>%
ggplot(aes(x = `Recovery Score`,
color = State)) +
stat_density(geom="line",position="identity") +
# Color based on number of counties per bin
scale_color_brewer(palette = "Dark2") +
labs(y = "Count",
color = "State") +
theme_minimal())
}
# knit and run app --------------------------------------------------------
shinyApp(ui, server)
