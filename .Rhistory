border.alpha = 0.1,
# Divides colors into significance levels
breaks = c(0, 0.01, 0.05, 0.1, Inf),
palette = "-Greens",
title = "Local Moran Significance") +
# Adjusts where the legend is located
tm_legend(legend.position = c("right", "bottom"))
# local moran plot ----------------------------------------------------
# Create the basemap
tm_shape(osm) +
tm_rgb() +
# Add polygons filled with local moran values
# Note that the region around Nashville has an incredibly high value
# And as such quantiles were necessary
tm_shape(moran.map) +
tm_polygons(col = "Ii",
alpha = 0.4,
border.alpha = 0.1,
style = "quantile",
palette = "Blues",
title = "Local Moran Statistic") +
# Adjusts where the legend is located
tm_legend(legend.position = c("right", "bottom"))
# local moran mixed ---------------------------------------------------
# Create the basemap
tm_shape(osm) +
tm_rgb() +
# Plots moran values
# Positive values indicate similar surrounding values
tm_shape(moran.map %>%
# Filters for only significant values
filter(Pr.z....E.Ii.. < 0.1)) +
# Add polygons filled with corresponding local moran stats
tm_polygons(col = "Ii",
alpha = 0.4,
border.alpha = 0.1,
style = "quantile",
palette = "Reds",
title = "Significant Local\nMoran Statistics") +
# Adjusts where the legend is located
tm_legend(legend.position = c("right", "bottom"))
moran_map <- cbind(counties_shp, local)
moran_map <- cbind(counties_shp, local)
tm_shape(osm) +
tm_rgb() +
# Plots moran values
# Positive values indicate similar surrounding values
tm_shape(moran.map %>%
# Filters for only significant values
filter(Pr.z....E.Ii.. < 0.1)) +
# Add polygons filled with corresponding local moran stats
tm_polygons(col = "Ii",
alpha = 0.4,
border.alpha = 0.1,
style = "quantile",
palette = "Reds",
title = "Significant Local\nMoran Statistics") +
# Adjusts where the legend is located
tm_legend(legend.position = c("right", "bottom"))
# setup -------------------------------------------------------------------
library(lubridate)
library(sf)
library(tmap)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(leaflet)
library(grid)
library(gridExtra)
library(spgwr)
library(sp)
library(spdep)
library(rgdal)
library(rgeos)
library(tmap)
library(tmaptools)
# data --------------------------------------------------------------------
# Read in Census et al. data
df_counties <-
read_csv("data/master_dataset_clean.csv") %>%
select(!...1) %>%
rename(State = state,
County = name)
# Read in shapefiles:
counties_shp <-
st_read('data/us_counties.shp') %>%
# Merge in state fips information
left_join(
read_csv("data/state_fips.csv"),
on = "STATEFP") %>%
select(c(GEOID, State, geometry)) %>%
# Filter to states in the dataset
filter(State %in%
unique(df_counties$State)) %>%
mutate(GEOID = as.integer(GEOID)) %>%
# Transform to WGS84
st_transform(crs = 4326)
# user interface ----------------------------------------------------------
# Create the user interface
ui <-
dashboardPage(
dashboardHeader(title = 'Mapping the Rust Belt'),
dashboardSidebar(
# Wait until action button is clicked to update
actionButton(
inputId = "update",
label = "Update"),
# Sets the alpha level
sliderInput("alpha", "Interactive Map Transparency:",
min = 0, max = 1,
value = 0.75),
# Sets the direction of the color palette
checkboxInput("dir", "Flip Color Palette?",
value = FALSE),
# Choose set of states
selectInput(
inputId = 'states',
label = 'States:',
choices = c(sort(
unique(df_counties$State))),
multiple = TRUE,
selected = sort(unique(df_counties$State))),
# Select features which will be used to calculate the "Rust Score"
checkboxGroupInput(inputId = "variables",
label = "Recovery Indicators:",
choices =
c("Population" = "pop_change",
"Foreign Born Population Change" =
"foreign_born_pop_percent_change",
"Income" = "income_change",
"Inequality Decrease" = "inequality_decrease",
"Poverty Decrease" = "poverty_decrease",
"Manufacturing Employment Change" =
"manufacturing_percent_change",
"Natural Resources Employment Change" =
"natural_resources_percent_change",
"Home Value" = "home_val_change",
"Home Construction" =
"housing_construction_increase"),
selected = c("pop_change", "income_change",
"home_val_change",
"housing_construction_increase",
"manufacturing_percent_change")),
# Creates menu to navigate to the home page, map, statistics,
# table, and histogram
sidebarMenu(
menuItem('Home',
icon = icon('home'),
tabName = 'home'),
menuItem('Interactive Map',
icon = icon('map'),
tabName = 'maps'),
menuItem('Statistical Analysis',
icon = icon('lightbulb'),
tabName = 'stats'),
menuItem('Summary Table',
icon = icon('table'),
tabName = 'tables'),
menuItem('Distributions',
icon = icon('chart-bar'),
tabName = 'charts')
)
),
# Adds css styling
dashboardBody(
tags$head(
tags$link(
rel = 'stylesheet',
type = 'text/css',
href = 'dashboard_styles.css'
)),
# Defines each tab in the menu
tabItems(
# Home tab/landing page
tabItem(
tabName = 'home',
h2('Welcome!'),
p("Select states and features, then explore the results in any
of the tabs. Click \"Update\" when you're ready to see
your changes."),
p("All variables represent changes from 2010 to 2019, except
manufacturing, natural resources, and foreign born population.
The first two features range from 2000 to 2010, and foreign born
population ranges from 2000 to 2019."),
p("Note that the static maps use local spatial autocorrelation,
which shows whether neighboring counties are similar. The first
figure shows this statistic in blue. The second, green map shows
counties where this value is significant, where we can be most
certain it is correct. Finally, the last, red map shows the same
information as the first map, but only for counties with
significant results.")),
# Map tab
tabItem(
tabName = 'maps',
h2('Interactive Map'),
leafletOutput(outputId = 'rust_map')),
# Local Autocorrelation tab
tabItem(
tabName = 'stats',
h2('Local Autocorrelation Analysis'),
fluidRow(cellWidths = c("33%", "33%", "33%"),
plotOutput(outputId = 'lm_map_1'),
plotOutput(outputId = 'lm_map_2'),
plotOutput(outputId = 'lm_map_3'))),
# Summary statistics tab
tabItem(
tabName = 'tables',
h2('Summary Table'),
dataTableOutput(outputId = 'summary_table')),
# Density Plots (first 5 selected states)
tabItem(
tabName = 'charts',
h2('Score Distributions'),
plotOutput(outputId = 'plot_output')))
)
)
# server ------------------------------------------------------------------
server <-
function(input, output) {
# Data subsetting and summarizing -------------------------------------
# Filter shapefile by selected states:
shp_filter <-
reactive({
counties_shp %>%
filter(State %in% input$states) %>%
select(-c(State))}) %>%
# Waits until user updates to run
bindEvent(input$update)
# Create the Rust Score using selected variables:
rust <-
reactive({
df_counties %>%
# Creates a new column combining selected variables into a single
# score using PCA
mutate(`Recovery Score` =
prcomp(select(., input$variables),
rank. = 1,
center = TRUE,
retx = TRUE)$x[,1]) %>%
# Filter by states
filter(State %in% input$states)
}) %>%
# Waits until user updates to run
bindEvent(input$update)
# Spatial autocorrelation calculations
morans <-
reactive({
moran_df <-
shp_filter() %>%
# Merge county information
left_join(
rust(),
by = "GEOID")
# Removes counties without neighbors (Two MA island counties)
# Will not work otherwise
counties_shp <- moran_df[-c(1073, 1865),]
# Determines which counties are neighbors
neighbors <- poly2nb(counties_shp)
# Calculates local spatial autocorrelation
local <- localmoran(x = counties_shp$`Recovery Score`,
listw = nb2listw(neighbors,
style = "W",
zero.policy = TRUE))
# Binds results to original shapefile and returns
cbind(counties_shp, local)
}) %>%
# Waits until user updates to run
bindEvent(input$update)
# Create static basemap
osm <-
reactive({
tmaptools::read_osm(bb(morans()), ext = 1.05)
}) %>%
# Waits until user updates to run
bindEvent(input$update)
# Outputs -------------------------------------------------------------
# Map:
output$rust_map <-
renderTmap(
# Merge shapefile
shp_filter() %>%
left_join(
rust(),
by = "GEOID") %>%
# Add colored polygons to the map
tm_shape(.) +
tm_polygons(col = "Recovery Score",
alpha = input$alpha,
border.alpha = 0.05,
palette =
# Flips the color palette if the user desires
if (input$dir == FALSE){"-BrBG"}
else{"BrBG"},
midpoint = NA,
style = "hclust",
id = "County",
legend.format = list(digits = 2),
popup.vars = c("County",
"State",
"Recovery Score"),
popup.format = list(digits = 2)) +
# Fit the initial zoom to the states we selected
tm_view(bbox =
st_bbox(shp_filter()))) %>%
# Waits until user updates to run
bindEvent(input$update)
# Local Autocorrelation Statistics:
# Raw Values
output$lm_map_1 <-
renderPlot({
tm_shape(osm()) +
tm_rgb() +
# Add polygons filled with local moran values
# Note that the region around Nashville has an incredibly high value
# And as such quantiles were necessary
tm_shape(morans()) +
tm_polygons(col = "Ii",
alpha = input$alpha,
border.alpha = 0.1,
style = "quantile",
palette =
# Flips the color palette if the user desires
if (input$dir == FALSE){"Blues"}
else{"-Blues"},
title = "Local Moran Statistic") +
# Adjusts where the legend is located
tm_legend(legend.position = c("right", "bottom"))
}) %>%
# Waits until user updates to run
bindEvent(input$update)
# Significance
output$lm_map_2 <-
renderPlot({
tm_shape(osm()) +
tm_rgb() +
# Add polygons filled with local moran significance
tm_shape(morans()) +
tm_polygons(col = "Pr.z....E.Ii..",
style = "fixed",
alpha = input$alpha,
border.alpha = 0.1,
# Divides colors into significance levels
breaks = c(0, 0.01, 0.05, 0.1, Inf),
palette =
# Flips the color palette if the user desires
if (input$dir == FALSE){"-Greens"}
else{"Greens"},
title = "Local Moran Significance") +
# Adjusts where the legend is located
tm_legend(legend.position = c("right", "bottom"))
}) %>%
# Waits until user updates to run
bindEvent(input$update)
# Values for significant (p < 0.1) regions
output$lm_map_3 <-
renderPlot({
tm_shape(osm()) +
tm_rgb() +
# Plots moran values
# Positive values indicate similar surrounding values
tm_shape(morans() %>%
# Filters for only significant values
filter(Pr.z....E.Ii.. < 0.1)) +
# Add polygons filled with corresponding local moran stats
tm_polygons(col = "Ii",
alpha = input$alpha,
border.alpha = 0.1,
style = "quantile",
palette =
# Flips the color palette if the user desires
if (input$dir == FALSE){"Reds"}
else{"-Reds"},
title = "Significant Local\nMoran Statistics") +
# Adjusts where the legend is located
tm_legend(legend.position = c("right", "bottom"))
}) %>%
# Waits until user updates to run
bindEvent(input$update)
# Summary table of Rust Score:
output$summary_table <-
renderDataTable(
rust() %>%
group_by(c(State)) %>%
summarize(
`Recovery Score IQR` = quantile(`Recovery Score`, probs = 0.75)-
quantile(`Recovery Score`, probs = 0.25),
`Maximum Recovery Score` = max(`Recovery Score`),
`75th Percentile Recovery Score` =
quantile(`Recovery Score`, probs = 0.75),
`Average Recovery Score` = mean(`Recovery Score`),
`25th Percentile Recovery Score` =
quantile(`Recovery Score`, probs = 0.25),
`Minimum Recovery Score` = min(`Recovery Score`)) %>%
arrange(`Average Recovery Score`) %>%
mutate(across(is.numeric, round, 3))
) %>%
# Waits until user updates to run
bindEvent(input$update)
# Histogram of county Recovery Scores:
output$plot_output <-
renderPlot({
rust() %>%
filter(State %in% input$states[1:5]) %>%
arrange(State) %>%
ggplot(aes(x = `Recovery Score`,
color = State)) +
stat_density(geom="line",position="identity") +
# Color based on number of counties per bin
scale_color_brewer(palette = "Dark2") +
labs(y = "Count",
color = "State") +
theme_minimal()}) %>%
# Waits until user updates to run
bindEvent(input$update)
}
# knit and run app --------------------------------------------------------
shinyApp(ui, server)
library(lubridate)
library(sf)
library(tmap)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(leaflet)
library(grid)
library(gridExtra)
library(spgwr)
library(sp)
library(spdep)
library(rgdal)
library(rgeos)
library(tmap)
library(tmaptools)
# data --------------------------------------------------------------------
# Read in Census et al. data
df_counties <-
read_csv("data/master_dataset_clean.csv") %>%
select(!...1) %>%
rename(State = state,
County = name)
# Read in shapefiles:
counties_shp <-
st_read('data/us_counties.shp') %>%
# Merge in state fips information
left_join(
read_csv("data/state_fips.csv"),
on = "STATEFP") %>%
select(c(GEOID, State, geometry)) %>%
# Filter to states in the dataset
filter(State %in%
unique(df_counties$State)) %>%
mutate(GEOID = as.integer(GEOID)) %>%
# Transform to WGS84
st_transform(crs = 4326)
getwd()
setwd("D:/Academics/GradSchool/GUClasses/PPOL683_GIS/Code/ppol683/apps/census_rust_belt_app")
library(lubridate)
library(sf)
library(tmap)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(leaflet)
library(grid)
library(gridExtra)
library(spgwr)
library(sp)
library(spdep)
library(rgdal)
library(rgeos)
library(tmap)
library(tmaptools)
# data --------------------------------------------------------------------
# Read in Census et al. data
df_counties <-
read_csv("data/master_dataset_clean.csv") %>%
select(!...1) %>%
rename(State = state,
County = name)
# Read in shapefiles:
counties_shp <-
st_read('data/us_counties.shp') %>%
# Merge in state fips information
left_join(
read_csv("data/state_fips.csv"),
on = "STATEFP") %>%
select(c(GEOID, State, geometry)) %>%
# Filter to states in the dataset
filter(State %in%
unique(df_counties$State)) %>%
mutate(GEOID = as.integer(GEOID)) %>%
# Transform to WGS84
st_transform(crs = 4326)
df_counties
library(lubridate)
library(sf)
library(tidyverse)
# data --------------------------------------------------------------------
# Read in Census et al. data
df_counties <-
read_csv("data/master_dataset.csv") %>%
select(!...1)
df_counties
library(shiny); runApp('ringmatt_final_shiny_app/rust_belt_app.R')
runApp('ringmatt_final_shiny_app/rust_belt_app.R')
runApp('ringmatt_final_shiny_app/rust_belt_app.R')
runApp('ringmatt_final_shiny_app/rust_belt_app.R')
library(shiny); runApp('ringmatt_final_shiny_app/rust_belt_app.R')
library(shiny); runApp('ringmatt_final_shiny_app/rust_belt_app.R')
runApp('ringmatt_final_shiny_app/rust_belt_app.R')
runApp('ringmatt_final_shiny_app/rust_belt_app.R')
runApp('ringmatt_final_shiny_app/rust_belt_app.R')
