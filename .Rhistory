data = mpg,
aes(x = cty,
y = hwy)) +
geom_point()
ggplot(
data = mpg,
aes(x = cty,
y = hwy)) +
geom_point() +
theme_minimal()
# Creates a plot of city fuel economy vs. highway fuel economy
ggplot(
data = mpg,
aes(x = cty,
y = hwy)) +
geom_point() +
labs(title = "Highway vs. City Fuel Economy",
x = "City Fuel Economy (mpg)",
y = "Highway Fuel Economy (mpg)") +
# Adds an overall theme to the visualization
theme_minimal()
# Imports necessary packages
library(tidyverse)
# Loads weather data
df <- read.csv("data/raw/messy_weather.csv")
# Normalizes the data following Codd's rules
df <- df %>%
# Converts separate columns for each day into separate rows
# Moves values from these columns into a new "values" variable
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
# Condenses the separate rows for precipitation, snow, and temperature
# into a single row, now showing all measures per location & day
pivot_wider(c(station, longitude, latitude, elevation, state, name, year, month, day),
names_from = variable,
values_from = values) %>%
# Fixes a violation of Codd's 1st normal rule, where the values of
# temperature_min_max are not atomic
separate(temperature_min_max, into = c("min_temp", "max_temp"), sep = ":")
# Displays the tidy'd data
df
stations <- df %>%
select(station:name) %>%
distinct()
stations
# Loads weather data
df <- read.csv("data/raw/messy_weather.csv")
# Checks for unique levels of observations
stations <- df %>%
select(station:name) %>%
distinct()
stations
observations_raw <- df %>%
select(year:march_31)
observations_raw
# Selects weather level data
observations_raw <- df %>%
select(year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values")
observations_raw
# Selects weather level data
observations_raw <- df %>%
select(station, year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
unite(c(year, month, day),
sep = "-")
# Selects weather level data
observations_raw <- df %>%
select(station, year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
unite("date",
c(year, month, day),
sep = "-")
observations_raw
# Selects weather level data
observations_raw <- df %>%
select(station, year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
unite("date",
c(year, month, day),
sep = "-") %>%
pivot_wider(c(station, date),
names_from = variable,
values_from = values)
observations_raw
# Selects weather level data
observations_raw <- df %>%
select(station, year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
unite("date",
c(year, month, day),
sep = "-") %>%
pivot_wider(names_from = variable,
values_from = values)
observations_raw
# Selects weather level data
observations_raw <- df %>%
select(station, year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
unite("date",
c(year, month, day),
sep = "-") %>%
pivot_wider(names_from = variable,
values_from = values) %>%
separate(temperature_min_max, into = c("min_temp", "max_temp"), sep = ":")
observations_raw
# Selects weather level data
observations_raw <- df %>%
select(station, year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
unite("date",
c(year, month, day),
sep = "-") %>%
pivot_wider(names_from = variable,
values_from = values) %>%
separate(temperature_min_max, into = c("min_temp", "max_temp"), sep = ":") %>%
mutate_at(vars(precip:max_temp),
~as.numeric()) %>%
mutate(date = lubridate::as_date(date))
# Loads weather data
df <- read.csv("data/raw/messy_weather.csv")
# Selects station level data
stations <- df %>%
select(station:name) %>%
distinct()
stations
# Selects weather level data
observations_raw <- df %>%
select(station, year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
unite("date",
c(year, month, day),
sep = "-") %>%
pivot_wider(names_from = variable,
values_from = values) %>%
separate(temperature_min_max, into = c("min_temp", "max_temp"), sep = ":") %>%
mutate_at(vars(precip:max_temp),
~as.numeric()) %>%
mutate(date = lubridate::as_date(date))
df %>%
select(station, year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
unite("date",
c(year, month, day),
sep = "-") %>%
pivot_wider(names_from = variable,
values_from = values) %>%
separate(temperature_min_max, into = c("min_temp", "max_temp"), sep = ":") %>%
mutate_at(vars(precip:max_temp),
~as.numeric())
df %>%
select(station, year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
unite("date",
c(year, month, day),
sep = "-") %>%
pivot_wider(names_from = variable,
values_from = values) %>%
separate(temperature_min_max, into = c("min_temp", "max_temp"), sep = ":")
# Selects weather level data
observations_raw <- df %>%
select(station, year:march_31) %>%
pivot_longer(contains("march"),
names_to = "day",
names_prefix = "march_",
values_to = "values") %>%
unite("date",
c(year, month, day),
sep = "-") %>%
pivot_wider(names_from = variable,
values_from = values) %>%
separate(temperature_min_max, into = c("min_temp", "max_temp"), sep = ":") %>%
mutate_at(vars(precip:max_temp),
~as.numeric(.)) %>%
mutate(date = lubridate::as_date(date))
observations_raw
install.packages("maptools", "sp", "raster", "rgdal", "rgeos")
install.packages("maptools")
install.packages("sp")
install.packages("raster")
install.packages("rgdal")
install.packages("rgeos")
install.packages(
c(
'maptools',
'raster',
'rgdal',
'rgeos',
'sp',
'tidyverse'
))
# Reads in shapefile of states
states <-
rgdal::readOGR("data/raw/spatial/dmv/stusps.shp") # Issa ESRI file
# Reads in shapefile of states
states <-
rgdal::readOGR("data/raw/spatial/stusps.shp") # Issa ESRI file
# What type of object is "states"?
class(states)
# Structure of "states"
str(states)
slotNames(states)
states@data
states@proj4string # contains the datum projection
sp::plot(states)
# Reads in shapefile of states
states <-
rgdal::readOGR("data/raw/spatial/states_dmv/stusps.shp") # Issa ESRI file
# What type of object is "states"?
class(states)
# Structure of "states"
str(states)
slotNames(states)
states@data
states@proj4string # contains the datum projection
sp::plot(states)
# Print proj4string of spatial dataset
raster::crs(states@proj4string)
# ESPG codes
rgdal::make_EPSG() %>%
as_tibble()
# Loads tidyverse
library(tidyverse)
# ESPG codes
rgdal::make_EPSG() %>%
as_tibble()
# ESPG codes
rgdal::make_EPSG() %>%
as_tibble() %>%
filter(str_detect(prj4, 'longlat'))
# ESPG codes
rgdal::make_EPSG() %>%
as_tibble() %>%
filter(str_detect(prj4, 'longlat'),
str_detect(prj4, 'WGS84')))
# ESPG codes
rgdal::make_EPSG() %>%
as_tibble() %>%
filter(str_detect(prj4, 'longlat'),
str_detect(prj4, 'WGS84'))
# Print proj4string of spatial dataset
raster::crs(states)
rgdal::make_EPSG()
# column names
names(states)
# Plotting Maryland
states %>%
filter(stat_nm == "Maryland") %>%
sp::plot(col = "#dcdcdc")
# Plotting Maryland
state_subset <- states %>%
filter(stat_nm == "Maryland")
sp::plot(state_subset,
col = "#dcdcdc")
# Plotting Maryland
state_subset <- states %>%
filter(stat_nm == "Maryland")
# Loads tidyverse
library(tidyverse)
# Plotting Maryland
state_subset <- states %>%
filter(stat_nm == "Maryland")
states
# Plotting Maryland
state_subset <- states %>%
as_tibble() %>%
filter(stat_nm == "Maryland")
# Plotting Maryland
state_subset <- states %>%
as_tibble() %>%
filter(stat_nm == "Maryland") %>%
sp::plot(col = "#dcdcdc")
# Plotting Maryland
state_subset <- states %>%
as_tibble() %>%
filter(stat_nm == "Maryland")
sp::plot(state_subset,
col = "#dcdcdc")
# Plotting Maryland
state_subset <- states %>%
as_tibble() %>%
filter(stat_nm == "Maryland")
sp::plot(state_subset,
col = "#dcdcdc")
# Plotting Maryland
state_subset <-
states[states$stat_nm == 'Maryland',]
sp::plot(
state_subset,
col = '#dcdcdc')
sp::plot(
states,
col = '#dcdcdc')
sp::plot(
state_subset,
col = '#bb0000',
add = TRUE)
region <-
rgeos::gUnaryUnion(states)
sp::plot(
region,
col = '#dcdcdc')
sites <-
read.csv('data/raw/sites.csv') %>%
select(lon, lat)
sites <-
read.csv('data/raw/spatial/states_dmv/sites.csv') %>%
select(lon, lat)
sites <-
read.csv('data/raw/wk3/sites.csv') %>%
select(lon, lat)
points <-
sp::SpatialPoints(
coords = sites,
proj4string = CRS("+init=epsg:4326"))
points <-
sp::SpatialPoints(
coords = sites,
proj4string = raster::crs("+init=epsg:4326"))
points <-
readr::read_csv('data/raw/wk3/sites.csv') %>%
as.data.frame() %>%
dplyr::select(lon, lat) %>%
sp::SpatialPoints(proj4string = raster::crs("+init=epsg:4326"))
sp::bbox(points)
sp::plot(
states,
col = '#dcdcdc')
sp::plot(
points,
pch = 19,
add = TRUE)
points_spdf <-
readr::read_csv('data/raw/wk3/sites.csv') %>%
as.data.frame() %>%
sp::SpatialPointsDataFrame(
coords = .[,c('lon', 'lat')],
data = .,
proj4string = sp::CRS("+init=epsg:4326"))
sp::plot(
states,
col = '#dcdcdc')
sp::plot(
points,
pch = 19,
col = 'red',
add = TRUE)
# Spatial join
sp::over(points_spdf, states) %>%
tibble::as_tibble()
install.packages(c('sf', 'maps'))
# Import data
states <-
rgdal::readOGR('data/raw/spatial/states_dmv/states.shp')
# Load packages
library(sf)
library(tidyverse)
class(states)
str(states)
states@data
# Import data, convert to simple features object
states <-
rgdal::readOGR('data/raw/spatial/states_dmv/states.shp') %>%
st_as_sf()
# Import data, convert to simple features object
states <-
rgdal::readOGR('data/raw/spatial/states_dmv/states.shp') %>%
st_as_sf() %>%
# Change column name for states
rename(state = ID) %>%
# Import additional 1977 state information
left_join(
read_csv('data/raw/spatial/wk3/states_1977.csv'),
by = 'state')
# Import data, convert to simple features object
states <-
rgdal::readOGR('data/raw/spatial/states_dmv/states.shp') %>%
st_as_sf() %>%
# Change column name for states
rename(state = ID) %>%
# Import additional 1977 state information
left_join(
read_csv('data/raw/wk3/states_1977.csv'),
by = 'state')
# Import data, convert to simple features object
states_sf <-
rgdal::readOGR('data/raw/spatial/states_dmv/states.shp') %>%
st_as_sf() %>%
# Change column name for states
rename(state = ID) %>%
# Import additional 1977 state information
left_join(
read_csv('data/raw/wk3/states_1977.csv'),
by = 'state')
# Plot with ggplot
states_sf %>%
rename(state = ID) %>%
left_join(
read_csv('data/raw/states_1977.csv'),
by = 'state') %>%
ggplot() +
geom_sf()
# Plot with ggplot
states_sf %>%
ggplot() +
geom_sf()
# Plot with ggplot
states_sf %>%
ggplot() +
geom_sf(aes(fill = population)) +
scale_fill_viridis_c(option = 'plasma')
states_prj <-
states_sf %>%
mutate(
population_density = population/area) %>%
st_transform(crs = 5070)
st_crs(states_prj)
states_prj %>%
ggplot() +
geom_sf(aes(fill = population_density)) +
scale_fill_gradient2(
low = 'blue',
mid = 'white',
high = 'red',
midpoint = 0.4)
states_prj %>%
ggplot() +
geom_sf(aes(fill = population_density)) +
scale_fill_gradient2(
low = 'blue',
mid = 'white',
high = 'red',
midpoint = 0.4) +
theme_void()
st_is_valid(states_sf)
# % of states with invalid geometries
st_is_valid(states_sf) %>%
sum(.)/nrow(states_sf)
# % of states with invalid geometries
# that are not easily fixable
st_is_valid(states_sf) %>%
st_is_valid() %>%
sum(.)/nrow(states_sf)
# % of states with invalid geometries
# that are not easily fixable
st_make_valid(states_sf) %>%
st_is_valid() %>%
sum(.)/nrow(states_sf)
# Overwrite (don't do irl!) and resave
states_proj <- states_prj %>%
st_make_valid()
sites %>%
read_csv("data/raw/wk3/sites.csv")
sites %>%
read_csv("data/raw/wk3/sites.csv")
sites <-
read_csv("data/raw/wk3/sites.csv")
# Super simple spatial join
states_sf %>%
st_join(states_prj)
sites_sf <-
read_csv("data/raw/wk3/sites.csv") %>%
st_as_sf(
x = sites,
coords = c('lon', 'lat'),
remove = FALSE,
crs = 4326) %>%
st_transform(st_crs(states_prj))
# Super simple spatial join!
# Needed to change crs
states_sf %>%
st_join(states_prj)
sites_sf <-
read_csv("data/raw/wk3/sites.csv") %>%
st_as_sf(
x = sites,
coords = c('lon', 'lat'),
remove = FALSE,
crs = 4326) %>%
st_transform(st_crs(states_prj))
